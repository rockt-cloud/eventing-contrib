/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "knative.dev/eventing-contrib/rocketmq/pkg/apis/messaging/v1alpha1"
)

// RocketmqChannelLister helps list RocketmqChannels.
type RocketmqChannelLister interface {
	// List lists all RocketmqChannels in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RocketmqChannel, err error)
	// RocketmqChannels returns an object that can list and get RocketmqChannels.
	RocketmqChannels(namespace string) RocketmqChannelNamespaceLister
	RocketmqChannelListerExpansion
}

// rocketmqChannelLister implements the RocketmqChannelLister interface.
type rocketmqChannelLister struct {
	indexer cache.Indexer
}

// NewRocketmqChannelLister returns a new RocketmqChannelLister.
func NewRocketmqChannelLister(indexer cache.Indexer) RocketmqChannelLister {
	return &rocketmqChannelLister{indexer: indexer}
}

// List lists all RocketmqChannels in the indexer.
func (s *rocketmqChannelLister) List(selector labels.Selector) (ret []*v1alpha1.RocketmqChannel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RocketmqChannel))
	})
	return ret, err
}

// RocketmqChannels returns an object that can list and get RocketmqChannels.
func (s *rocketmqChannelLister) RocketmqChannels(namespace string) RocketmqChannelNamespaceLister {
	return rocketmqChannelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RocketmqChannelNamespaceLister helps list and get RocketmqChannels.
type RocketmqChannelNamespaceLister interface {
	// List lists all RocketmqChannels in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.RocketmqChannel, err error)
	// Get retrieves the RocketmqChannel from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.RocketmqChannel, error)
	RocketmqChannelNamespaceListerExpansion
}

// rocketmqChannelNamespaceLister implements the RocketmqChannelNamespaceLister
// interface.
type rocketmqChannelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RocketmqChannels in the indexer for a given namespace.
func (s rocketmqChannelNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RocketmqChannel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RocketmqChannel))
	})
	return ret, err
}

// Get retrieves the RocketmqChannel from the indexer for a given namespace and name.
func (s rocketmqChannelNamespaceLister) Get(name string) (*v1alpha1.RocketmqChannel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("rocketmqchannel"), name)
	}
	return obj.(*v1alpha1.RocketmqChannel), nil
}
